=*              *How I Wrote Over One Million Specs
                   in Less Than 24 Hours*


              PS: I work at Nike but didn't create
                    an ascii logo yet... sorry...


                    ⋛⋋( ‘Θ’)⋌⋚ @levionessa

                              ̑ PPS: We're hiring (•̀ᴗ•́)و̑̑

*                    { brace yourselves }

                       ~heh... get it?~

                         ~brace...~  (¬‿¬)

*                     *y u rite so many?*


             (」゜ロ゜)」 ~OVER 9000!!!~


                              ~(1 million even...)~ ʕᴥ• ʔ☝



*
*                    *how u rite so many???*

                                        ~how?~ (•ิ_•ิ)?

          ʕ ⊃･ ◡ ･ ʔ⊃ ~we'll get there...~

*                    *a little background*


                   I write 💎 ALL day ｡◕‿◕｡


                                           ~... at work.~

*                       *but at home...*

                          I <3 λ


                (ˇ_ˇ”) ƪ(˘⌣˘)┐ ƪ(˘⌣˘)ʃ ┌(˘⌣˘)ʃ


                     ʕ•͜ ͢ ͞ •ʔ  ~I'll play with anything...~

*                   ~i can haz lithp?~ ヽ(*⌒∇⌒*)ﾉ


             (define (❤lang)
               (display "As long as it has ()s"))

*               *wait... wat were we talking about?*

                 ~sorry for the diversion...~
             ~promise there's a point to this...~ 😽

*                            *TDD*

                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤

*           *TDD IS DEAD!*     ~i need a hug... (>'.')>~



                    *or so some* might say...


            ~ó_ò (are we still listening to that guy?)~

*                      *Long Live TDD!!!*



                     (^_________________^)



                       ~testing makes me _really_ happy.~

*                *EVEN MORE TDD!!! \m/(>.<)\m/*

                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
                ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤ ⬤
*                *EVEN MORE POWERFUL TDD!!!*


                    ~put 'em up~ ✧ʕ̢̣̣̣̣̩̩̩̩·͡˔·ོɁ̡̣̣̣̣̩̩̩̩✧

*                              *but Nessa...* (´ι_｀ )

            ๑⚈ ․̫ ⚈๑)  ~yeeessss....~


            How could we make TDD more powerful???

                            O.o

*                              *but Nessa...* (´ι_｀ )

            ๑⚈ ․̫ ⚈๑)  ~yeeessss....~

            We have Cucumber and RSpec and Capybara...
*                              *but Nessa...* (´ι_｀ )

            ๑⚈ ․̫ ⚈๑)  ~yeeessss....~

            We have Cucumber and RSpec and Capybara...
            and we have Selenium and Web kit...

            features, acceptance tests, unit test...

*                          uhhhh


                           *WTFDD*
*                       ((())) λλλλ


                       () ~we have the technology~


           ~by jove I think we've got it~ λ

*                         examples

#+begin_src ruby
                                     #exactly! ヽ(;^o^ヽ)
    describe "#reverse" do
      let(:string) { "hello world" }

      it "shall make the first last and the last first" do
        expect(string.reverse.first).to eq(string.last)
      end
    end
#+begin_src
*                       a little better...
#+begin_src ruby
    describe "#reverse" do
      let(:string) { SecureRandom.hex }

      it "shall make the first last and the last first" do
        expect(string.reverse.first).to eq(string.last)
      end
    end
#+end_src

*              (¬ -̮ ¬)   [for every string...]


#+begin_src ruby
    describe "#reverse" do
      #let(:string) { SecureRandom.hex }
      all_the(:string)

      it "shall make the first last and the last first" do
        expect(string.reverse.first).to eq(string.last)
      end
    end
#+end_src
*                     What if I told you...

                       ~it *is* possible~

                             -o-o-

*                        we just need...



                                    ~one more thing~

*                    *all together now!*
#+begin_src ruby
  describe "#reverse" do
    generative do
      for_every(:string) { generate(:string) }

      it "shall make the last first and the first last" do
        expect(string.reverse.last).to eq(string.first)
      end
    end
  end
#+end_src

*              [say hello to my little friend]


                    GENERATIVE TESTING!!!


                 ┗( ^o^)┛≡┏( ^o^)┓≡┗( ^o^)┛

*                      *genera-whaaa...*

#+begin_src ruby
                    *generative do*
                       *# some stuff*
                    *end*
#+end_src
                             ~this is a generative test~
                             ~after all...~ （〜^∇^)〜

*                       *Generative*

#+begin_src ruby
                      # Gemfile
                    gem 'generative'
#+end_src

           ~it's just a gem!~ ♪(((#^-^)八(^_^*)))♪

*                       *Degenerate*

#+begin_src ruby
                      # Gemfile
                    gem 'degenerate'

                      # provides
                   generate(:string)
#+end_src

*                     *back to business*
#+begin_src ruby
  describe "#reverse" do
    generative do
      for_every(:string) { generate(:string) }

      it "shall make the last first and the first last" do
        expect(string.reverse.last).to eq(string.first)
      end
    end
  end
#+end_src
*                       *drum roll...*

#+begin_src bash
$ rake
> GENERATIVE_COUNT=10_000
> rspec --require generative --format Generative --tag generative
> Run options: include {:generative=>true}
#+end_src

*                          *~BAM!~*
#+begin_src bash
> String
>  #reverse
>    generative
>      last shall be first and first shall be last
>
> Finished in 0.48 seconds
> 10000 examples, 0 failures
#+end_src
*                  *what* just happened? (¬▂¬)


             (⌯⊙⍛⊙)  ~is she ever going to explain?~

         ~I've just been looking at pictures...~ (=^‥^=)

*                     [Panic Moonwalk...]


         ~Do *not* moonwalk away from me!~  o(-`д´- ｡)
*               gentlemen, start your generators
#+begin_src ruby
    n.times do { generate(:string, limit: 10) }
    # => "E^xrgzDyK"
    # => "<tu;\5J"
    # => "="  and so on...
#+end_src
                               ~more on this later...~

*                Ok... so what happens when it fails?

 ERROR: expected: true
        got: false
        example: "@PG7\\f9=uZTpJUDz>Mp^D[`vZSv1XERkgufQl15yp\
              ?4a<yA\\\\TnK7>7AyJqUmdnPh3T1S3;;Rht:htRsha^I`\
              nbuAJYobRzqxIeX[blI?_px]?8YVhwFA:AQw]pE<OBju;1>\
              eL;otvK9IHi<krXlD<>re_6k\\h_11xNc1oOf9gJtg`7fu^\
              6gZlFznOsrMGqTuQEExDqX>uPx]x`^F^kQnRD]3EC<@@c?G\
              kP;R=R_8NY8HF_PB>iF4ZV:Bckw1=Vro3HFn5g[ey3tze5T\
              nEaT=e;[jqn]VL4C^V?2ea]fLRCf9G]7gx8CeGe29NfN6O\
              ]QqI<s=ntMOHXj9]Qem`bOqB=QvaaQV_7yCIhHHLHb3^`Uccao?_i6Yr

*                 I'm melting! err... shrinking...

              expected: true
              got:      false
              shrunk example:   "$"

*                    Welcome to Amazon  (･`◡´･)ゝ
#+begin_src ruby
  # order == Order.new(type: :digital, address: '429 Wallaby Way',
  #                    email: 'nemo@thesea.com', store_id: '1')

  # order.to_variant == [:digital, #<Order:0x007feb1b06cda0>]

        OrderDispatch.dispatch(order.to_variant)

#+end_src
*                 Just Another Day on the Job...
#+begin_src ruby
       class OrderDispatch

       def self.dispatch(order)
         cases order,
           digital: ->(o) { o.email! },
           pickup: ->(o) { o.ship_to_store! },
           delivery: ->(o) { o.shipit! }
         end
       end
#+end_src

*                         variants...
#+begin_src ruby
   def cases(variant, matches)
     raise NonVariant unless is_variant?(variant)
     type, *args = variant
     m = matches[type] || matches[:else]
     m.call(*args)
   end
#+end_src

*                          is it?...
#+begin_src ruby
   def is_variant?(variant)
     type, *rest = variant
     type.is_a?(Symbol) || type.is_a?(String)
   end
#+end_src

*                   It looks like it works
#+begin_src ruby
    it "returns true for a valid variant" do
      expect(is_variant?([:string, "test"])).to be true
    end


#+end_src

*                 Still looking good!
#+begin_src ruby
    it "returns false for things that aren't variants" do
      expect(is_variant?(User.new)).to be false
    end
#+end_src

*                    Let's just make sure...

#+begin_src ruby
    Generative.register_generator(:variant) do
      [generate(:key), generate(:any)]
    end
#+end_src

*                    Let's just make sure...

#+begin_src ruby
   generative do
     for_every(:variant) { generate(:variant) }

     it "returns true for variants" do
       expect(is_variant?(variant)).to be true
     end
   end
#+end_src

*                    Let's just make sure...
#+begin_src ruby
    Generative.register_generator(:nonvariant) do
      generators = Generative.manager.generators
      generator = generators.keys.select { |g|
        !g.to_s.match(//variant//)
      }.sample
      generator.call(limit: 100)
    end
#+end_src

*                    Let's just make sure...
#+begin_src ruby
   generative do
     for_every(:nonvariant) { generate(:nonvariant) }

     it "returns false for nonvariants" do
       expect(is_variant?(nonvariant)).to be false
     end
   end
#+end_src

*                         WOOPS!

Failures:

  1) Nifty::Variants is_variant?  returns false of invalid variants
     Failure/Error: expect(is_variant?(nonvariant)).to be false

       expected false
            got true
       shrunk example: :eoaijo

     # ./spec/lib/nifty/variants_spec.rb:47:in `block (4 levels) in <top (required)>'

*                    Why did that fail?
#+begin_src ruby
    first, *rest = [1, 2, 3]
    first == 1
    rest == [2, 3]
#+end_src

*                    Why did that fail?
#+begin_src ruby
    first, *rest = :eoaijo
    first == :eoaijo
    rest == []
#+end_src

*                          B4
#+begin_src ruby
   def is_variant?(variant)
     type, *rest = variant
     type.is_a?(Symbol) || type.is_a?(String)
   end
#+end_src


*                        after

#+begin_src ruby
   def is_variant?(variant)
     type, *rest = variant
     (type.is_a?(Symbol) || type.is_a?(String)) &&
        !rest.empty?
   end
#+end_src

*                        after moar tests...
#+begin_src ruby
   def is_variant?(variant)
     type, *rest = variant
     type.is_a?(Symbol) && !rest.empty?
   end
#+end_src

*                    Ok... but what about...

         ٩(͡๏̯͡๏)۶     ~you have some 'splainin to do~
*                    Ok... but what about...

                  Performance?

                       ~This seems slloooooww~
*                   limit generator scope
#+begin_src ruby
 # Don't do this...
 Generative.register_generator(:first_name) do |_opts|
   Generative.generate(:string)
   # max length is 2305843009213693951
   # on 64 bit machines...
 end
#+end_src

*                   limit generator scope
#+begin_src ruby
 # Do this!
 Generative.register_generator(:first_name) do |_opts|
   Generative.generate(:string, limit: 200)
 end
#+end_src
*                    Ok... but what about...

                             Flakey specs?

         ~ugh... I hate flakey specs...~
                           ლ(｡-﹏-｡ ლ)
*                    yup... limit scope
~remember me?~
#+begin_src ruby
   def is_variant?(variant)
     type, *rest = variant
     type.is_a?(Symbol) && !rest.empty?
   end
#+end_src
*                           before
~remember me?~
#+begin_src ruby
   def is_variant?(variant)
     type, *rest = variant
     type.is_a?(Symbol) || type.is_a?(String)
       && !rest.empty?
   end
#+end_src
*                           after
~remember me?~
#+begin_src ruby
   def is_variant?(variant)
     type, *rest = variant
     type.is_a?(Symbol) && !rest.empty?
   end
#+end_src
*       （。-＿-。）   so what's the catch???

       ~ok... there's a couple caveats...~  (^_^;)
*                      no shrinking yet...

                        ヽ(´□｀。)ﾉ

                   me: ~Shrink darn you!!!~
                   example: ~I won't do it!!~
*                            hax

         ~wat are these extra bits for?~ (゜-゜)

          (⊙_☉)   ~ehhh... probably nothing...~
*                      all is NOT lost!!!

                (ˇ_ˇ”) ƪ(˘⌣˘)┐ ƪ(˘⌣˘)ʃ ┌(˘⌣˘)ʃ
